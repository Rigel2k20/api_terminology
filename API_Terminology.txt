⨀ What is an API?
    ✓ API stands for Application Programming Interface. is an interface that allows two applications to communicate with each other.
    • Think of it like a waiter in a restaurant who takes your order (request) to the kitchen (the application) 
        ↪ and then brings the food (the response) back to you.
    
⨀ Why Are APIs Important?
    ✓ APIs are everywhere! They allow applications, devices, and websites to interact. For example:

    • Using an app to book a hotel: 
        ↪ The app sends a request to a hotel booking service API, which responds with available rooms.

    • Logging in with Google/Facebook: 
        ↪ The app uses an API from Google or Facebook to authenticate your identity.

⨀ Basic Concepts of APIs
    1. Request and Response
        ✓ APIs work with two main actions:

        • Request: Your application sends a request to the API to get some information or perform an action.
        • Response: The API sends a response back, usually containing the data or confirmation that the action was successful.

    2. Endpoints
        ✓ An endpoint is a specific URL where an API is accessed. 
            ↪ Each endpoint corresponds to a specific function or resource, like retrieving data about users, products, or making a payment.

        ⁕ Example endpoint:
            ↪ https://api.example.com/users
            ✓ {/users} is the endpoint for retrieving user data.
    
        ⁕ A live example using Postman to perform a GET request with a specific endpoint:
            ↪ https://bored-api.appbrewery.com/random # Expect a random activity

            ✓ the GET request will return a JSON response with a random activity: # Will talk about what is a JSON file.
                ↪ {
                    "activity": "Rearrange and organize your room",
                    "availability": 0.15,
                    "type": "busywork",
                    "participants": 1,
                    "price": 0,
                    "accessibility": "Minor challenges",
                    "duration": "minutes",
                    "kidFriendly": true,
                    "link": "",
                    "key": "6197243"
                }

                • The response contains information about the activity, its type, and other details.
                ✓ Most public APIs that don't require authentication use (Rate method)
                    ↪ to limit the number of requests you can make in a given period of time.
                    # Like : "Api requests are rate limited to 100 every 15 minutes."

    3. Query parameters:
        ✓ Query parameters are used to customize the request.
            • They are added to the endpoint URL and are separated by a question mark (?).
            * For example:
                ↪ https://bored-api.appbrewery.com/filter?type=recreational
                * This will return an array of activities that are of type "recreational":
                    ↪  [
                            {
                                "activity": "Learn how to play a new sport",
                                "availability": 0.2,
                                "type": "recreational",
                                "participants": 1,
                                "price": 0.1,
                                "accessibility": "Minor challenges",
                                "duration": "minutes",
                                "kidFriendly": true,
                                "link": "",
                                "key": "5808228"
                            },
                            {
                                "activity": "Fill out a basketball bracket",
                                "availability": 0.1,
                                "type": "recreational",
                                "participants": 1,
                                "price": 0,
                                "accessibility": "Few to no challenges",
                                "duration": "minutes",
                                "kidFriendly": true,
                                "link": "",
                                "key": "7806284"
                            },
                            {
                                "activity": "Learn how to iceskate or rollerskate",
                                "availability": 0.25,
                                "type": "recreational",
                                "participants": 1,
                                "price": 0.1,
                                "accessibility": "Major challenges",
                                "duration": "days",
                                "kidFriendly": true,
                                "link": "",
                                "key": "5947957"
                            }
                        ]
                # In this example, the query parameter "type" is set to "recreational" 
                    ↪ # this will return activities that are recreational only.

        ✓ You can use multiple queries in a single request by separating them with an ampersand (&):
            * for example :
                ↪ https://bored-api.appbrewery.com/filter?type=recreational&participants=2
                # This will return an array of activities that are recreational and have 2 participants:

    4. Path Parameters: 
        ✓ A path parameter is a variable part of the URL that identifies a specific resource
            ↪ It's placed directly in the URL path, usually marked with {curly braces} in documentation

        ⁕ Example of Path Parameters:
            ↪ https://api.example.com/users/{userId}
            • {userId} is the path parameter
            • To get user with ID 123, you would use:
                ↪ https://api.example.com/users/123

        ⁕ Real-world example with a bookstore API:
            ↪ https://api.bookstore.com/books/{bookId}
            • To get book with ID 456:
                ↪ https://api.bookstore.com/books/456

        ✓ Path Parameters vs Query Parameters:
            • Path Parameters: Part of the URL path
                ↪ Example: /users/{userId}
            • Query Parameters: Added after ? symbol
                ↪ Example: /users?sort=asc
⨀ JSON (JavaScript Object Notation)
    ✓ A lightweight data format for exchanging information
    ✓ Files use .json extension
    
    1. JSON Structure
        ✓ Basic Syntax:
            • Key-value pairs
            • Keys must be strings with double quotes
            • Values: strings, numbers, arrays, booleans, objects, null
                ↪ {
                    "name": "Maria",
                    "age": 25,
                    "active": true
                }

        ✓ Arrays:
            ↪ {
                "colors": ["red", "green", "blue"]
                }

        ✓ Nested Objects:
            ↪ {
                "user": {
                "id": 1,
                "name": "Ahmed",
                "skills": ["Python", "Kotlin"]
                    }
               }

    2. Working with JSON
         ✓ Parse Method (String to Object):
            ↪ const jsonString = '{"name": "Maria", "age": 25}'
            ↪ const data = JSON.parse(jsonString)

        ✓ Stringify Method (Object to String):
            ↪ const data = { name: "Maria", age: 25 }
            ↪ const jsonString = JSON.stringify(data)

        ✓ Error Handling:
            ↪ try {
                const data = JSON.parse(invalidJson)
                } catch (error) {
                console.error('Invalid JSON format')
                }   

    3. JSON with APIs
        ✓ Request Headers:
            • Content-Type: application/json
            • Accept: application/json

        ✓ Common Status Codes:
            • 200: Successful JSON response
            • 400: Invalid JSON in request
            • 415: Unsupported media type

        ✓ API Example:
                ↪ fetch('/api/users', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ name: 'Maria' })
                })

    4. Usage Patterns
        ✓ Configuration Files:
            ↪ {
                "appName": "MyApp",
                "version": "1.0.0",
                "port": 3000
               }

        ✓ File Operations:
            • Reading:
                ↪ const data = fs.readFileSync('data.json', 'utf-8')
                ↪ const jsonData = JSON.parse(data)

            • Writing:
                ↪ fs.writeFileSync('data.json', 
                   JSON.stringify(newData, null, 2))

        ✓ Data Exchange:
            • API Responses
            • WebSocket Messages
            • Database Storage

    5. Validation & Security
        ✓ Schema Validation:
            • JSON Schema
            • Type checking
            • Required fields

        ✓ Security Practices:
            • Sanitize JSON input
            • Validate data types
            • Set size limits
            • Use HTTPS for transmission

    6. Best Practices
        ✓ Structure:
            • Keep hierarchy shallow
            • Use consistent naming
            • Limit array sizes

        ✓ Formatting:
            • Proper indentation
            • Use pretty print for readability
                ↪ JSON.stringify(data, null, 2)

        ✓ Development Tools:
            • JSONLint for validation
            • Browser DevTools
            • Postman for API testing                
                ↪ JSON.stringify(data, null, 2)                  