⨀ What is an API?
    ✓ API stands for Application Programming Interface, 
        an interface that allows two applications to communicate with each other.

    • Core Concepts:
        → Request-Response Cycle
        → Authentication
        → Rate Limiting
            * Example:
                ↪ Rate limit: 100 requests per 15 minutes
                # Rate Limit Response:
                    ↪ HTTP/1.1 429 Too Many Requests
                    {
                        "error": "Rate limit exceeded",
                        "retry_after": 900
                    }

    • Real-world Applications:
        → Hotel Booking Apps:
            * Example:
                ↪ GET /api/hotels/availability
                # Success Response:
                    ↪ HTTP/1.1 200 OK
                    {
                        "available_rooms": [
                            {"type": "suite", "price": 200},
                            {"type": "double", "price": 150}
                        ]
                    }

        → Social Login:
            * Example:
                ↪ POST /api/auth/google
                # Success Response:
                    ↪ HTTP/1.1 200 OK
                    {
                        "user_id": "123",
                        "token": "abc123xyz"
                    }

                # Error Response:
                    ↪ HTTP/1.1 401 Unauthorized
                    {
                        "error": "Authentication failed"
                    }

⨀ Basic Concepts of APIs
    ✓ Request and Response are fundamental mechanisms by which applications communicate through APIs.

        • Request Components:
            → HTTP Method (GET, POST, etc.)
            → Headers (Authentication, Content-Type)
            → URL/Endpoint
            → Query Parameters (Optional)
            → Request Body (Optional)
                * Example:
                    ↪ POST https://api.example.com/users
                    Headers:
                        Authorization: Bearer abc123
                        Content-Type: application/json
                    Body:
                        {
                            "name": "John Doe",
                            "email": "john@example.com"
                        }

        • Response Components:
            → Status Code (200, 404, etc.)
            → Headers (Content-Type, Cache-Control)
            → Response Body
                * Example:
                    ↪ HTTP/1.1 201 Created
                    Headers:
                        Content-Type: application/json
                    Body:
                        {
                            "id": 123,
                            "name": "John Doe",
                            "created_at": "2024-01-20T12:00:00Z"
                        }

        • Request Mechanism:
            → An application sends a request to retrieve or modify data
                * Example:
                    ↪ GET https://api.example.com/users
                    # Success Response:
                        ↪ HTTP/1.1 200 OK
                        {
                            "users": [
                                {"id": 1, "name": "John Doe"},
                                {"id": 2, "name": "Jane Smith"}
                            ]
                        }

        • Response Mechanism:
            → The API processes the request and returns data or confirmation
                * Example:
                    ↪ POST https://api.example.com/users
                    # Success Response:
                        ↪ HTTP/1.1 201 Created
                        {
                            "id": 3,
                            "name": "New User",
                            "created_at": "2024-01-20T12:00:00Z"
                        }

                    # Error Response:
                        ↪ HTTP/1.1 400 Bad Request
                        {
                            "error": "Invalid user data",
                            "details": "Name is required"
                        }

⨀ Additional Topics: Expanding API Knowledge
    ✓ SOAP APIs (Simple Object Access Protocol) is a protocol used for exchanging structured information in web services.
        → SOAP APIs are often used for legacy systems or when strict data structure is required.
            * Example:
                ↪ POST https://api.soapexample.com/Service
                Headers:
                    Content-Type: text/xml
                Body:
                    <Envelope>
                        <Body>
                            <GetWeather>
                                <City>London</City>
                            </GetWeather>
                        </Body>
                    </Envelope>

        • GraphQL:
            → GraphQL is a query language for APIs that allows clients to request only the data they need.
                * Example Query:
                    ↪ {
                        user(id: "123") {
                            name
                            email
                            posts {
                                title
                            }
                        }
                    }
                    ↪ HTTP/1.1 200 OK
                    # Success Response output:
                    {
                        "user": {
                            "name": "John Doe",
                            "email": "john@example.com",
                            "posts": [
                                {"title": "Post 1"},
                                {"title": "Post 2"}
                                }
                    }


        • Error Handling Best Practices:
            → Use meaningful error messages and consistent status codes.
                * Example:
                    ↪ HTTP/1.1 400 Bad Request
                        {
                            "error": "Invalid data",
                            "details": "Email is required"
                        }

        • API Testing Tools:
            → Postman: For testing APIs interactively.
            → Swagger: For documenting and testing API endpoints.
            → Curl: Command-line tool for making API requests.

        • Cross-Origin Resource Sharing (CORS):
            → CORS is a mechanism that allows restricted resources on a web page to be requested from another domain.
                * Example:
                    ↪ Access-Control-Allow-Origin: 
                    ↪ Access-Control-Allow-Methods: GET, POST
